import telebot
from telebot import types
import sqlite3
import json

bot = telebot.TeleBot("8194023558:AAHVlbIPSv2ExcB8ZBg4nCl3XYBB2U5zf4g")

conn = sqlite3.connect('bot_database.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    score INTEGER DEFAULT 0
)
''')
conn.commit()


def register_user(user_id, username):
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (id, username, score) VALUES (?, ?, ?)", (user_id, username, 0))
        conn.commit()


def update_score(user_id, additional_points):
    cursor.execute("SELECT score FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        new_score = result[0] + additional_points
        cursor.execute("UPDATE users SET score = ? WHERE id = ?", (new_score, user_id))
        conn.commit()


def get_ratings():
    cursor.execute("SELECT username, score FROM users ORDER BY score DESC LIMIT 10")
    return cursor.fetchall()

def get_games_markup():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    english_web_app = types.WebAppInfo(url="https://arinauru.github.io/english_game.html")

    btn_english = types.KeyboardButton("–ò–≥—Ä–∞: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", web_app=english_web_app)
    btn_rating = types.KeyboardButton("–†–µ–π—Ç–∏–Ω–≥")

    # —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É
    # flappy_web_app = types.WebAppInfo(url="https://YOUR_DOMAIN/flappy_birds.html")
    # pingpong_web_app = types.WebAppInfo(url="https://YOUR_DOMAIN/ping_pong.html")
    # btn_flappy = types.KeyboardButton("Flappy Birds", web_app=flappy_web_app)
    # btn_pingpong = types.KeyboardButton("Ping-Pong", web_app=pingpong_web_app)

    # markup.add(btn_english, btn_flappy, btn_pingpong, btn_rating)
    markup.add(btn_english, btn_rating)
    return markup


def get_english_games_markup():
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –∏–≥—Ä—ã"""
    markup = types.InlineKeyboardMarkup(row_width=1)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä
    snake_game = types.InlineKeyboardButton(
        text="üêç –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ó–º–µ–π–∫–∞",
        web_app=types.WebAppInfo(url="https://arinauru.github.io/english_game.html")
    )

    cards_game = types.InlineKeyboardButton(
        text="üÉè –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ª–æ–≤–∞—Ä—è",
        web_app=types.WebAppInfo(url="https://arinauru.github.io/english_game.html")
    )

    quiz_game = types.InlineKeyboardButton(
        text="‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –í—Ä–µ–º–µ–Ω",
        web_app=types.WebAppInfo(url="https://arinauru.github.io/english_game.html")
    )

    markup.add(snake_game, cards_game, quiz_game)
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    register_user(message.from_user.id, message.from_user.username)
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:",
        reply_markup=get_games_markup()
    )

@bot.message_handler(func=lambda message: message.text == "üéÆ –ò–≥—Ä–∞: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π")
def show_english_games(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏–≥—Ä"""
    bot.send_message(
        message.chat.id,
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=get_english_games_markup()
    )

@bot.message_handler(content_types=['text'])
def handle_text(message):
    text = message.text.strip()

    if text == "–†–µ–π—Ç–∏–Ω–≥":
        ratings = get_ratings()
        if ratings:
            rating_text = "‚≠êÔ∏è –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ ‚≠êÔ∏è\n\n"
            for i, (username, score) in enumerate(ratings, 1):
                rating_text += f"{i}. {username} ‚Äî {score} –æ—á–∫–æ–≤\n"
        else:
            rating_text = "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç."
        bot.send_message(message.chat.id, rating_text)
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥.")


@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    bot.send_message(message.chat.id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã...")
    try:
        data = message.web_app_data.data
        result = json.loads(data)

        if result.get("game") == "english" and "score" in result:
            update_score(message.from_user.id, result["score"])
            total_score = result["score"]
            bot.send_message(
                message.chat.id,
                f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≥—Ä—É –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É –∏ –Ω–∞–±—Ä–∞–ª–∏ {total_score} –æ—á–∫–æ–≤!"
            )
        else:
            bot.send_message(message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∞—è –∏–≥—Ä–∞.")
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")


bot.polling(none_stop=True, interval=0)
